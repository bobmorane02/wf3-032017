Arborescence :
    app/    :   La configuration de l'application
    src/    :   Le code PHP et HTML spécifique au projet
    vendor/ :   Code général (coeur) de l'application et les entités.
    web/    :   Le répertoire web racine. Le point d'entrée de l'application (index.php, img/ js/ css/ font/) (asset)

    -----------------------------------------------------------------------------------------------------------------

    Nature des différents fichiers :

framework/
 │
 ├─ app/
 │   ├─ Config/
 │   │   └ parameters.php           : Contient toutes les informations de connexion à la BDD et autres paramétres ...
 │   └─ Config.php                  : Contient l'inclusion des paramétres de connexion à la BDD, et les retourne dans une
 │                                    méthode getParametersConnect().
 ├─ vendor/
 │   ├─ autoload.php                : Permet d'inclure les bons fichiers lors d'un 'new' (instanciation).
 │   │                                Attention: seuls les controllers sont dans le dossier 'src', il faut donc préciser
 │   │                                que si le namespace n'est pas 'Controller' alors les fichiers sont dans 'vendor'.
 │   │                                Autre subtilité : Le controller général (Contoller\Controller) est également dans 'vendor'
 │   │
 │   ├─ Manager/
 │   │   ├─ PDOManager.php          : Cette classe représente la connexion à la BDD. Elle contient et nous retourne notre objet PDO
 │   │   │                            grâce auquel nous pourrons effectuer des requêtes.
 │   │   │                            Cette classe est un Singleton. Cela signifie qu'il qu'on ne peut instancier qu'un seul objet
 │   │   │                            de cette classe.
 │   │   │   
 │   │   ├─ EntityRepository.php    : Un repository centralise tout de qui touche à la BDD et la récupération des entités.
 │   │   │                            Concrètement il ne doit pas y avoir de requête ailleurs que dans un repository.
 │   │   │                            Si une entité à besoin d'une requête spécifique (exemple: jointure) dans ce cas les
 │   │   │                            requêtes seront codées directement dans le repository en question.  
 │   │   │
 │   │   └─ Application.php         : Lancement de notre application. Cette classe récupére les infos dans l'URL pour instancier 
 │   │                                le bon controller et lancer la bonne action (méthode).
 │   │
 │   ├─ Entity/
 │   │   ├─ Produit.php               Classes qui contiennent toutes les propriétés (private) de nos entités et getters et
 │   │   ├─ Membre.php                setters. POPO (Plain Old PHP Object).
 │   │   └─ Commande.php
 │   │
 │   ├─ Repository/
 │   │   └ ProduitRepository.php     : Ce fichier contiendra toutes les fonctions liées à l'entité produit, demandera à EntityRepository
 │   │                                de faire certaines requêtes. Et si l'entité a besoin de requêtes spécifiques, elles seront codéés ici.
 │   └─ Controller/
 │       └ Controller.php            : C'est le contrôleur général de l'application. Il a deux missions :
 │                                      1 - Récupérer le repository correspondant à l'entité dans laquelle je suis :
 │                                          getRepository()
 │                                      2 - Affiche la vue correspondnat à l'action : render() 
 ├─ web/
 │   └─ index.php                   : Clé d'entrée de notre application. (SILEX : index.php / SYMFONY : app.php)
 │
 └─ src/
     ├─ Controller/
     │   └─ ProduitController.php   : Cette classe hérite du contrôleur général de l'application, et permet de déclencher toutes les actions
     │                                liées à l'entité produit.
     │
     └─ View/
            Produit/
                fiche_produit.php     Ces trois fichiers correspondent aux vues des actions (respectivement) affiche($id), afficheAll() et
                boutique.php          categorie($categorie) de notre entité produit.
                categorie.php         Plus tard , ces fichiers seront décomposés, et auront l'extension .html (lorsque la méthode render() du
                                      contrôleur général sera opérationnelle).

            Layout.html             : Le layout représente la page générale, le template de base. Il peut y avoir plusieur layout s'il y a
                                      plusieurs structures de page dans notre application ( home, contact, mentions légales, inscription ...)